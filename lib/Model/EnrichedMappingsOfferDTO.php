<?php
/**
 * EnrichedMappingsOfferDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YandexMarketApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YandexMarketApi\Model;

use \ArrayAccess;
use \YandexMarketApi\ObjectSerializer;

/**
 * EnrichedMappingsOfferDTO Class Doc Comment
 *
 * @category Class
 * @description Информация о рекомендованных карточках товаров.
 * @package  YandexMarketApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnrichedMappingsOfferDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnrichedMappingsOfferDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'shop_sku' => 'string',
        'category' => 'string',
        'vendor' => 'string',
        'vendor_code' => 'string',
        'description' => 'string',
        'id' => 'string',
        'feed_id' => 'int',
        'price' => 'float',
        'barcodes' => 'string[]',
        'urls' => 'string[]',
        'pictures' => 'string[]',
        'manufacturer' => 'string',
        'manufacturer_countries' => 'string[]',
        'min_shipment' => 'int',
        'transport_unit_size' => 'int',
        'quantum_of_supply' => 'int',
        'delivery_duration_days' => 'int',
        'box_count' => 'int',
        'customs_commodity_codes' => 'string[]',
        'weight_dimensions' => '\YandexMarketApi\Model\OfferWeightDimensionsDTO',
        'supply_schedule_days' => '\YandexMarketApi\Model\DayOfWeekType[]',
        'shelf_life_days' => 'int',
        'life_time_days' => 'int',
        'guarantee_period_days' => 'int',
        'processing_state' => '\YandexMarketApi\Model\OfferProcessingStateDTO',
        'availability' => '\YandexMarketApi\Model\OfferAvailabilityStatusType',
        'shelf_life' => '\YandexMarketApi\Model\TimePeriodDTO',
        'life_time' => '\YandexMarketApi\Model\TimePeriodDTO',
        'guarantee_period' => '\YandexMarketApi\Model\TimePeriodDTO',
        'certificate' => 'string',
        'market_category_id' => 'int',
        'market_category_name' => 'string',
        'market_model_id' => 'int',
        'market_model_name' => 'string',
        'market_sku' => 'int',
        'market_sku_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'shop_sku' => null,
        'category' => null,
        'vendor' => null,
        'vendor_code' => null,
        'description' => null,
        'id' => null,
        'feed_id' => 'int64',
        'price' => null,
        'barcodes' => null,
        'urls' => null,
        'pictures' => null,
        'manufacturer' => null,
        'manufacturer_countries' => null,
        'min_shipment' => 'int32',
        'transport_unit_size' => 'int32',
        'quantum_of_supply' => 'int32',
        'delivery_duration_days' => 'int32',
        'box_count' => 'int32',
        'customs_commodity_codes' => null,
        'weight_dimensions' => null,
        'supply_schedule_days' => null,
        'shelf_life_days' => 'int32',
        'life_time_days' => 'int32',
        'guarantee_period_days' => 'int32',
        'processing_state' => null,
        'availability' => null,
        'shelf_life' => null,
        'life_time' => null,
        'guarantee_period' => null,
        'certificate' => null,
        'market_category_id' => 'int64',
        'market_category_name' => null,
        'market_model_id' => 'int64',
        'market_model_name' => null,
        'market_sku' => 'int64',
        'market_sku_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'shop_sku' => false,
		'category' => false,
		'vendor' => false,
		'vendor_code' => false,
		'description' => false,
		'id' => false,
		'feed_id' => false,
		'price' => false,
		'barcodes' => false,
		'urls' => false,
		'pictures' => false,
		'manufacturer' => false,
		'manufacturer_countries' => false,
		'min_shipment' => false,
		'transport_unit_size' => false,
		'quantum_of_supply' => false,
		'delivery_duration_days' => false,
		'box_count' => false,
		'customs_commodity_codes' => false,
		'weight_dimensions' => false,
		'supply_schedule_days' => false,
		'shelf_life_days' => false,
		'life_time_days' => false,
		'guarantee_period_days' => false,
		'processing_state' => false,
		'availability' => false,
		'shelf_life' => false,
		'life_time' => false,
		'guarantee_period' => false,
		'certificate' => false,
		'market_category_id' => false,
		'market_category_name' => false,
		'market_model_id' => false,
		'market_model_name' => false,
		'market_sku' => false,
		'market_sku_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'shop_sku' => 'shopSku',
        'category' => 'category',
        'vendor' => 'vendor',
        'vendor_code' => 'vendorCode',
        'description' => 'description',
        'id' => 'id',
        'feed_id' => 'feedId',
        'price' => 'price',
        'barcodes' => 'barcodes',
        'urls' => 'urls',
        'pictures' => 'pictures',
        'manufacturer' => 'manufacturer',
        'manufacturer_countries' => 'manufacturerCountries',
        'min_shipment' => 'minShipment',
        'transport_unit_size' => 'transportUnitSize',
        'quantum_of_supply' => 'quantumOfSupply',
        'delivery_duration_days' => 'deliveryDurationDays',
        'box_count' => 'boxCount',
        'customs_commodity_codes' => 'customsCommodityCodes',
        'weight_dimensions' => 'weightDimensions',
        'supply_schedule_days' => 'supplyScheduleDays',
        'shelf_life_days' => 'shelfLifeDays',
        'life_time_days' => 'lifeTimeDays',
        'guarantee_period_days' => 'guaranteePeriodDays',
        'processing_state' => 'processingState',
        'availability' => 'availability',
        'shelf_life' => 'shelfLife',
        'life_time' => 'lifeTime',
        'guarantee_period' => 'guaranteePeriod',
        'certificate' => 'certificate',
        'market_category_id' => 'marketCategoryId',
        'market_category_name' => 'marketCategoryName',
        'market_model_id' => 'marketModelId',
        'market_model_name' => 'marketModelName',
        'market_sku' => 'marketSku',
        'market_sku_name' => 'marketSkuName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'shop_sku' => 'setShopSku',
        'category' => 'setCategory',
        'vendor' => 'setVendor',
        'vendor_code' => 'setVendorCode',
        'description' => 'setDescription',
        'id' => 'setId',
        'feed_id' => 'setFeedId',
        'price' => 'setPrice',
        'barcodes' => 'setBarcodes',
        'urls' => 'setUrls',
        'pictures' => 'setPictures',
        'manufacturer' => 'setManufacturer',
        'manufacturer_countries' => 'setManufacturerCountries',
        'min_shipment' => 'setMinShipment',
        'transport_unit_size' => 'setTransportUnitSize',
        'quantum_of_supply' => 'setQuantumOfSupply',
        'delivery_duration_days' => 'setDeliveryDurationDays',
        'box_count' => 'setBoxCount',
        'customs_commodity_codes' => 'setCustomsCommodityCodes',
        'weight_dimensions' => 'setWeightDimensions',
        'supply_schedule_days' => 'setSupplyScheduleDays',
        'shelf_life_days' => 'setShelfLifeDays',
        'life_time_days' => 'setLifeTimeDays',
        'guarantee_period_days' => 'setGuaranteePeriodDays',
        'processing_state' => 'setProcessingState',
        'availability' => 'setAvailability',
        'shelf_life' => 'setShelfLife',
        'life_time' => 'setLifeTime',
        'guarantee_period' => 'setGuaranteePeriod',
        'certificate' => 'setCertificate',
        'market_category_id' => 'setMarketCategoryId',
        'market_category_name' => 'setMarketCategoryName',
        'market_model_id' => 'setMarketModelId',
        'market_model_name' => 'setMarketModelName',
        'market_sku' => 'setMarketSku',
        'market_sku_name' => 'setMarketSkuName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'shop_sku' => 'getShopSku',
        'category' => 'getCategory',
        'vendor' => 'getVendor',
        'vendor_code' => 'getVendorCode',
        'description' => 'getDescription',
        'id' => 'getId',
        'feed_id' => 'getFeedId',
        'price' => 'getPrice',
        'barcodes' => 'getBarcodes',
        'urls' => 'getUrls',
        'pictures' => 'getPictures',
        'manufacturer' => 'getManufacturer',
        'manufacturer_countries' => 'getManufacturerCountries',
        'min_shipment' => 'getMinShipment',
        'transport_unit_size' => 'getTransportUnitSize',
        'quantum_of_supply' => 'getQuantumOfSupply',
        'delivery_duration_days' => 'getDeliveryDurationDays',
        'box_count' => 'getBoxCount',
        'customs_commodity_codes' => 'getCustomsCommodityCodes',
        'weight_dimensions' => 'getWeightDimensions',
        'supply_schedule_days' => 'getSupplyScheduleDays',
        'shelf_life_days' => 'getShelfLifeDays',
        'life_time_days' => 'getLifeTimeDays',
        'guarantee_period_days' => 'getGuaranteePeriodDays',
        'processing_state' => 'getProcessingState',
        'availability' => 'getAvailability',
        'shelf_life' => 'getShelfLife',
        'life_time' => 'getLifeTime',
        'guarantee_period' => 'getGuaranteePeriod',
        'certificate' => 'getCertificate',
        'market_category_id' => 'getMarketCategoryId',
        'market_category_name' => 'getMarketCategoryName',
        'market_model_id' => 'getMarketModelId',
        'market_model_name' => 'getMarketModelName',
        'market_sku' => 'getMarketSku',
        'market_sku_name' => 'getMarketSkuName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('shop_sku', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('vendor', $data ?? [], null);
        $this->setIfExists('vendor_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('feed_id', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('barcodes', $data ?? [], null);
        $this->setIfExists('urls', $data ?? [], null);
        $this->setIfExists('pictures', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('manufacturer_countries', $data ?? [], null);
        $this->setIfExists('min_shipment', $data ?? [], null);
        $this->setIfExists('transport_unit_size', $data ?? [], null);
        $this->setIfExists('quantum_of_supply', $data ?? [], null);
        $this->setIfExists('delivery_duration_days', $data ?? [], null);
        $this->setIfExists('box_count', $data ?? [], null);
        $this->setIfExists('customs_commodity_codes', $data ?? [], null);
        $this->setIfExists('weight_dimensions', $data ?? [], null);
        $this->setIfExists('supply_schedule_days', $data ?? [], null);
        $this->setIfExists('shelf_life_days', $data ?? [], null);
        $this->setIfExists('life_time_days', $data ?? [], null);
        $this->setIfExists('guarantee_period_days', $data ?? [], null);
        $this->setIfExists('processing_state', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], null);
        $this->setIfExists('shelf_life', $data ?? [], null);
        $this->setIfExists('life_time', $data ?? [], null);
        $this->setIfExists('guarantee_period', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
        $this->setIfExists('market_category_id', $data ?? [], null);
        $this->setIfExists('market_category_name', $data ?? [], null);
        $this->setIfExists('market_model_id', $data ?? [], null);
        $this->setIfExists('market_model_name', $data ?? [], null);
        $this->setIfExists('market_sku', $data ?? [], null);
        $this->setIfExists('market_sku_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 150)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['shop_sku']) && (mb_strlen($this->container['shop_sku']) > 80)) {
            $invalidProperties[] = "invalid value for 'shop_sku', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['shop_sku']) && (mb_strlen($this->container['shop_sku']) < 1)) {
            $invalidProperties[] = "invalid value for 'shop_sku', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shop_sku']) && !preg_match("/^[\\da-zA-ZА-Яа-я\\.,\/\\\\\\(\\)\\[\\]\\-=_]*$/", $this->container['shop_sku'])) {
            $invalidProperties[] = "invalid value for 'shop_sku', must be conform to the pattern /^[\\da-zA-ZА-Яа-я\\.,\/\\\\\\(\\)\\[\\]\\-=_]*$/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 6000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 6000.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 80)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) < 1)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['id']) && !preg_match("/^[\\da-zA-ZА-Яа-я\\.,\/\\\\\\(\\)\\[\\]\\-=_]*$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[\\da-zA-ZА-Яа-я\\.,\/\\\\\\(\\)\\[\\]\\-=_]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 150.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $name when calling EnrichedMappingsOfferDTO., must be smaller than or equal to 150.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shop_sku
     *
     * @return string|null
     */
    public function getShopSku()
    {
        return $this->container['shop_sku'];
    }

    /**
     * Sets shop_sku
     *
     * @param string|null $shop_sku **Ваш SKU**  Идентификатор товара в магазине. Разрешены английские и русские буквы (кроме ё), цифры и символы `. , / \\ ( ) [ ] - = _`  Максимальная длина — 80 знаков.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields).
     *
     * @return self
     */
    public function setShopSku($shop_sku)
    {
        if (is_null($shop_sku)) {
            throw new \InvalidArgumentException('non-nullable shop_sku cannot be null');
        }
        if ((mb_strlen($shop_sku) > 80)) {
            throw new \InvalidArgumentException('invalid length for $shop_sku when calling EnrichedMappingsOfferDTO., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($shop_sku) < 1)) {
            throw new \InvalidArgumentException('invalid length for $shop_sku when calling EnrichedMappingsOfferDTO., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\da-zA-ZА-Яа-я\\.,\/\\\\\\(\\)\\[\\]\\-=_]*$/", $shop_sku))) {
            throw new \InvalidArgumentException("invalid value for \$shop_sku when calling EnrichedMappingsOfferDTO., must conform to the pattern /^[\\da-zA-ZА-Яа-я\\.,\/\\\\\\(\\)\\[\\]\\-=_]*$/.");
        }

        $this->container['shop_sku'] = $shop_sku;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Категория, к которой магазин относит свой товар. Она помогает точнее определить для товара категорию в каталоге Маркета.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string|null $vendor Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        if (is_null($vendor)) {
            throw new \InvalidArgumentException('non-nullable vendor cannot be null');
        }
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets vendor_code
     *
     * @return string|null
     */
    public function getVendorCode()
    {
        return $this->container['vendor_code'];
    }

    /**
     * Sets vendor_code
     *
     * @param string|null $vendor_code Артикул товара от производителя.
     *
     * @return self
     */
    public function setVendorCode($vendor_code)
    {
        if (is_null($vendor_code)) {
            throw new \InvalidArgumentException('non-nullable vendor_code cannot be null');
        }
        $this->container['vendor_code'] = $vendor_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 6000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EnrichedMappingsOfferDTO., must be smaller than or equal to 6000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id **Ваш SKU**  Идентификатор товара в магазине. Разрешены английские и русские буквы (кроме ё), цифры и символы `. , / \\ ( ) [ ] - = _`  Максимальная длина — 80 знаков.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields).
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 80)) {
            throw new \InvalidArgumentException('invalid length for $id when calling EnrichedMappingsOfferDTO., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $id when calling EnrichedMappingsOfferDTO., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\da-zA-ZА-Яа-я\\.,\/\\\\\\(\\)\\[\\]\\-=_]*$/", $id))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling EnrichedMappingsOfferDTO., must conform to the pattern /^[\\da-zA-ZА-Яа-я\\.,\/\\\\\\(\\)\\[\\]\\-=_]*$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets feed_id
     *
     * @return int|null
     */
    public function getFeedId()
    {
        return $this->container['feed_id'];
    }

    /**
     * Sets feed_id
     *
     * @param int|null $feed_id Идентификатор фида.
     *
     * @return self
     */
    public function setFeedId($feed_id)
    {
        if (is_null($feed_id)) {
            throw new \InvalidArgumentException('non-nullable feed_id cannot be null');
        }
        $this->container['feed_id'] = $feed_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Цена товара в рублях.
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets barcodes
     *
     * @return string[]|null
     */
    public function getBarcodes()
    {
        return $this->container['barcodes'];
    }

    /**
     * Sets barcodes
     *
     * @param string[]|null $barcodes Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  [*gtin]:**Что такое GTIN**\\nGTIN — это уникальный номер, присвоенный товару в единой международной базе [GS1](https://ru.wikipedia.org/wiki/GS1). Из этого номера получается штрихкод формата EAN, UPC или ISBN.\\n\\n**Как убедиться, что товар есть в базе**\\nПроверить код можно на [странице проверки](https://gepir.gs1.org/index.php/search-by-gtin) на сайте ассоциации GS1. Если товар не находится, запросите код GTIN у вашего поставщика.\\n\\n**Как получить GTIN для своих товаров**\\nЧтобы получить коды GTIN, производителю нужно вступить в ассоциацию GS1 и зарегистрировать товары.
     *
     * @return self
     */
    public function setBarcodes($barcodes)
    {
        if (is_null($barcodes)) {
            throw new \InvalidArgumentException('non-nullable barcodes cannot be null');
        }
        $this->container['barcodes'] = $barcodes;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return string[]|null
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param string[]|null $urls URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.
     *
     * @return self
     */
    public function setUrls($urls)
    {
        if (is_null($urls)) {
            throw new \InvalidArgumentException('non-nullable urls cannot be null');
        }
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets pictures
     *
     * @return string[]|null
     */
    public function getPictures()
    {
        return $this->container['pictures'];
    }

    /**
     * Sets pictures
     *
     * @param string[]|null $pictures Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 10 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`.
     *
     * @return self
     */
    public function setPictures($pictures)
    {
        if (is_null($pictures)) {
            throw new \InvalidArgumentException('non-nullable pictures cannot be null');
        }
        $this->container['pictures'] = $pictures;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets manufacturer_countries
     *
     * @return string[]|null
     */
    public function getManufacturerCountries()
    {
        return $this->container['manufacturer_countries'];
    }

    /**
     * Sets manufacturer_countries
     *
     * @param string[]|null $manufacturer_countries Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.
     *
     * @return self
     */
    public function setManufacturerCountries($manufacturer_countries)
    {
        if (is_null($manufacturer_countries)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_countries cannot be null');
        }
        $this->container['manufacturer_countries'] = $manufacturer_countries;

        return $this;
    }

    /**
     * Gets min_shipment
     *
     * @return int|null
     */
    public function getMinShipment()
    {
        return $this->container['min_shipment'];
    }

    /**
     * Sets min_shipment
     *
     * @param int|null $min_shipment Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.
     *
     * @return self
     */
    public function setMinShipment($min_shipment)
    {
        if (is_null($min_shipment)) {
            throw new \InvalidArgumentException('non-nullable min_shipment cannot be null');
        }
        $this->container['min_shipment'] = $min_shipment;

        return $this;
    }

    /**
     * Gets transport_unit_size
     *
     * @return int|null
     */
    public function getTransportUnitSize()
    {
        return $this->container['transport_unit_size'];
    }

    /**
     * Sets transport_unit_size
     *
     * @param int|null $transport_unit_size Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.
     *
     * @return self
     */
    public function setTransportUnitSize($transport_unit_size)
    {
        if (is_null($transport_unit_size)) {
            throw new \InvalidArgumentException('non-nullable transport_unit_size cannot be null');
        }
        $this->container['transport_unit_size'] = $transport_unit_size;

        return $this;
    }

    /**
     * Gets quantum_of_supply
     *
     * @return int|null
     */
    public function getQuantumOfSupply()
    {
        return $this->container['quantum_of_supply'];
    }

    /**
     * Sets quantum_of_supply
     *
     * @param int|null $quantum_of_supply Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.
     *
     * @return self
     */
    public function setQuantumOfSupply($quantum_of_supply)
    {
        if (is_null($quantum_of_supply)) {
            throw new \InvalidArgumentException('non-nullable quantum_of_supply cannot be null');
        }
        $this->container['quantum_of_supply'] = $quantum_of_supply;

        return $this;
    }

    /**
     * Gets delivery_duration_days
     *
     * @return int|null
     */
    public function getDeliveryDurationDays()
    {
        return $this->container['delivery_duration_days'];
    }

    /**
     * Sets delivery_duration_days
     *
     * @param int|null $delivery_duration_days Срок, за который продавец поставляет товары на склад, в днях.
     *
     * @return self
     */
    public function setDeliveryDurationDays($delivery_duration_days)
    {
        if (is_null($delivery_duration_days)) {
            throw new \InvalidArgumentException('non-nullable delivery_duration_days cannot be null');
        }
        $this->container['delivery_duration_days'] = $delivery_duration_days;

        return $this;
    }

    /**
     * Gets box_count
     *
     * @return int|null
     */
    public function getBoxCount()
    {
        return $this->container['box_count'];
    }

    /**
     * Sets box_count
     *
     * @param int|null $box_count Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.
     *
     * @return self
     */
    public function setBoxCount($box_count)
    {
        if (is_null($box_count)) {
            throw new \InvalidArgumentException('non-nullable box_count cannot be null');
        }
        $this->container['box_count'] = $box_count;

        return $this;
    }

    /**
     * Gets customs_commodity_codes
     *
     * @return string[]|null
     */
    public function getCustomsCommodityCodes()
    {
        return $this->container['customs_commodity_codes'];
    }

    /**
     * Sets customs_commodity_codes
     *
     * @param string[]|null $customs_commodity_codes Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.
     *
     * @return self
     */
    public function setCustomsCommodityCodes($customs_commodity_codes)
    {
        if (is_null($customs_commodity_codes)) {
            throw new \InvalidArgumentException('non-nullable customs_commodity_codes cannot be null');
        }
        $this->container['customs_commodity_codes'] = $customs_commodity_codes;

        return $this;
    }

    /**
     * Gets weight_dimensions
     *
     * @return \YandexMarketApi\Model\OfferWeightDimensionsDTO|null
     */
    public function getWeightDimensions()
    {
        return $this->container['weight_dimensions'];
    }

    /**
     * Sets weight_dimensions
     *
     * @param \YandexMarketApi\Model\OfferWeightDimensionsDTO|null $weight_dimensions weight_dimensions
     *
     * @return self
     */
    public function setWeightDimensions($weight_dimensions)
    {
        if (is_null($weight_dimensions)) {
            throw new \InvalidArgumentException('non-nullable weight_dimensions cannot be null');
        }
        $this->container['weight_dimensions'] = $weight_dimensions;

        return $this;
    }

    /**
     * Gets supply_schedule_days
     *
     * @return \YandexMarketApi\Model\DayOfWeekType[]|null
     */
    public function getSupplyScheduleDays()
    {
        return $this->container['supply_schedule_days'];
    }

    /**
     * Sets supply_schedule_days
     *
     * @param \YandexMarketApi\Model\DayOfWeekType[]|null $supply_schedule_days Дни недели, в которые продавец поставляет товары на склад.
     *
     * @return self
     */
    public function setSupplyScheduleDays($supply_schedule_days)
    {
        if (is_null($supply_schedule_days)) {
            throw new \InvalidArgumentException('non-nullable supply_schedule_days cannot be null');
        }
        $this->container['supply_schedule_days'] = $supply_schedule_days;

        return $this;
    }

    /**
     * Gets shelf_life_days
     *
     * @return int|null
     */
    public function getShelfLifeDays()
    {
        return $this->container['shelf_life_days'];
    }

    /**
     * Sets shelf_life_days
     *
     * @param int|null $shelf_life_days {% note alert %}  Параметр устарел и не рекомендуется к использованию. Вместо него используйте параметр `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.
     *
     * @return self
     */
    public function setShelfLifeDays($shelf_life_days)
    {
        if (is_null($shelf_life_days)) {
            throw new \InvalidArgumentException('non-nullable shelf_life_days cannot be null');
        }
        $this->container['shelf_life_days'] = $shelf_life_days;

        return $this;
    }

    /**
     * Gets life_time_days
     *
     * @return int|null
     */
    public function getLifeTimeDays()
    {
        return $this->container['life_time_days'];
    }

    /**
     * Sets life_time_days
     *
     * @param int|null $life_time_days {% note alert %}  Параметр устарел и не рекомендуется к использованию. Вместо него используйте параметр `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.
     *
     * @return self
     */
    public function setLifeTimeDays($life_time_days)
    {
        if (is_null($life_time_days)) {
            throw new \InvalidArgumentException('non-nullable life_time_days cannot be null');
        }
        $this->container['life_time_days'] = $life_time_days;

        return $this;
    }

    /**
     * Gets guarantee_period_days
     *
     * @return int|null
     */
    public function getGuaranteePeriodDays()
    {
        return $this->container['guarantee_period_days'];
    }

    /**
     * Sets guarantee_period_days
     *
     * @param int|null $guarantee_period_days Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.
     *
     * @return self
     */
    public function setGuaranteePeriodDays($guarantee_period_days)
    {
        if (is_null($guarantee_period_days)) {
            throw new \InvalidArgumentException('non-nullable guarantee_period_days cannot be null');
        }
        $this->container['guarantee_period_days'] = $guarantee_period_days;

        return $this;
    }

    /**
     * Gets processing_state
     *
     * @return \YandexMarketApi\Model\OfferProcessingStateDTO|null
     */
    public function getProcessingState()
    {
        return $this->container['processing_state'];
    }

    /**
     * Sets processing_state
     *
     * @param \YandexMarketApi\Model\OfferProcessingStateDTO|null $processing_state processing_state
     *
     * @return self
     */
    public function setProcessingState($processing_state)
    {
        if (is_null($processing_state)) {
            throw new \InvalidArgumentException('non-nullable processing_state cannot be null');
        }
        $this->container['processing_state'] = $processing_state;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \YandexMarketApi\Model\OfferAvailabilityStatusType|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \YandexMarketApi\Model\OfferAvailabilityStatusType|null $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        if (is_null($availability)) {
            throw new \InvalidArgumentException('non-nullable availability cannot be null');
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets shelf_life
     *
     * @return \YandexMarketApi\Model\TimePeriodDTO|null
     */
    public function getShelfLife()
    {
        return $this->container['shelf_life'];
    }

    /**
     * Sets shelf_life
     *
     * @param \YandexMarketApi\Model\TimePeriodDTO|null $shelf_life shelf_life
     *
     * @return self
     */
    public function setShelfLife($shelf_life)
    {
        if (is_null($shelf_life)) {
            throw new \InvalidArgumentException('non-nullable shelf_life cannot be null');
        }
        $this->container['shelf_life'] = $shelf_life;

        return $this;
    }

    /**
     * Gets life_time
     *
     * @return \YandexMarketApi\Model\TimePeriodDTO|null
     */
    public function getLifeTime()
    {
        return $this->container['life_time'];
    }

    /**
     * Sets life_time
     *
     * @param \YandexMarketApi\Model\TimePeriodDTO|null $life_time life_time
     *
     * @return self
     */
    public function setLifeTime($life_time)
    {
        if (is_null($life_time)) {
            throw new \InvalidArgumentException('non-nullable life_time cannot be null');
        }
        $this->container['life_time'] = $life_time;

        return $this;
    }

    /**
     * Gets guarantee_period
     *
     * @return \YandexMarketApi\Model\TimePeriodDTO|null
     */
    public function getGuaranteePeriod()
    {
        return $this->container['guarantee_period'];
    }

    /**
     * Sets guarantee_period
     *
     * @param \YandexMarketApi\Model\TimePeriodDTO|null $guarantee_period guarantee_period
     *
     * @return self
     */
    public function setGuaranteePeriod($guarantee_period)
    {
        if (is_null($guarantee_period)) {
            throw new \InvalidArgumentException('non-nullable guarantee_period cannot be null');
        }
        $this->container['guarantee_period'] = $guarantee_period;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate Номер документа на товар.  Перед указанием номера документ нужно загрузить в личном кабинете магазина. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)
     *
     * @return self
     */
    public function setCertificate($certificate)
    {
        if (is_null($certificate)) {
            throw new \InvalidArgumentException('non-nullable certificate cannot be null');
        }
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets market_category_id
     *
     * @return int|null
     */
    public function getMarketCategoryId()
    {
        return $this->container['market_category_id'];
    }

    /**
     * Sets market_category_id
     *
     * @param int|null $market_category_id Идентификатор категории для рекомендованной карточки товара на Маркете.  Возвращается только вместе с параметром ##marketSku##.
     *
     * @return self
     */
    public function setMarketCategoryId($market_category_id)
    {
        if (is_null($market_category_id)) {
            throw new \InvalidArgumentException('non-nullable market_category_id cannot be null');
        }
        $this->container['market_category_id'] = $market_category_id;

        return $this;
    }

    /**
     * Gets market_category_name
     *
     * @return string|null
     */
    public function getMarketCategoryName()
    {
        return $this->container['market_category_name'];
    }

    /**
     * Sets market_category_name
     *
     * @param string|null $market_category_name Название категории для рекомендованной карточки товара на Маркете.  Может отсутствовать в ответе.
     *
     * @return self
     */
    public function setMarketCategoryName($market_category_name)
    {
        if (is_null($market_category_name)) {
            throw new \InvalidArgumentException('non-nullable market_category_name cannot be null');
        }
        $this->container['market_category_name'] = $market_category_name;

        return $this;
    }

    /**
     * Gets market_model_id
     *
     * @return int|null
     */
    public function getMarketModelId()
    {
        return $this->container['market_model_id'];
    }

    /**
     * Sets market_model_id
     *
     * @param int|null $market_model_id Идентификатор модели для рекомендованной карточки товара на Маркете.  Может отсутствовать в ответе.
     *
     * @return self
     */
    public function setMarketModelId($market_model_id)
    {
        if (is_null($market_model_id)) {
            throw new \InvalidArgumentException('non-nullable market_model_id cannot be null');
        }
        $this->container['market_model_id'] = $market_model_id;

        return $this;
    }

    /**
     * Gets market_model_name
     *
     * @return string|null
     */
    public function getMarketModelName()
    {
        return $this->container['market_model_name'];
    }

    /**
     * Sets market_model_name
     *
     * @param string|null $market_model_name Название модели для рекомендованной карточки товара на Маркете.  Возвращается только вместе с параметром ##marketSku##.
     *
     * @return self
     */
    public function setMarketModelName($market_model_name)
    {
        if (is_null($market_model_name)) {
            throw new \InvalidArgumentException('non-nullable market_model_name cannot be null');
        }
        $this->container['market_model_name'] = $market_model_name;

        return $this;
    }

    /**
     * Gets market_sku
     *
     * @return int|null
     */
    public function getMarketSku()
    {
        return $this->container['market_sku'];
    }

    /**
     * Sets market_sku
     *
     * @param int|null $market_sku SKU на Маркете.
     *
     * @return self
     */
    public function setMarketSku($market_sku)
    {
        if (is_null($market_sku)) {
            throw new \InvalidArgumentException('non-nullable market_sku cannot be null');
        }
        $this->container['market_sku'] = $market_sku;

        return $this;
    }

    /**
     * Gets market_sku_name
     *
     * @return string|null
     */
    public function getMarketSkuName()
    {
        return $this->container['market_sku_name'];
    }

    /**
     * Sets market_sku_name
     *
     * @param string|null $market_sku_name Название товара с рекомендованной карточки на Маркете.  Может отсутствовать в ответе.
     *
     * @return self
     */
    public function setMarketSkuName($market_sku_name)
    {
        if (is_null($market_sku_name)) {
            throw new \InvalidArgumentException('non-nullable market_sku_name cannot be null');
        }
        $this->container['market_sku_name'] = $market_sku_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


