<?php
/**
 * OrdersStatsOrderDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YandexMarketApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YandexMarketApi\Model;

use \ArrayAccess;
use \YandexMarketApi\ObjectSerializer;

/**
 * OrdersStatsOrderDTO Class Doc Comment
 *
 * @category Class
 * @description Информация о заказе.
 * @package  YandexMarketApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrdersStatsOrderDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrdersStatsOrderDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'creation_date' => '\DateTime',
        'status_update_date' => '\DateTime',
        'status' => '\YandexMarketApi\Model\OrderStatsStatusType',
        'partner_order_id' => 'string',
        'payment_type' => '\YandexMarketApi\Model\OrdersStatsOrderPaymentType',
        'fake' => 'bool',
        'delivery_region' => '\YandexMarketApi\Model\OrdersStatsDeliveryRegionDTO',
        'items' => '\YandexMarketApi\Model\OrdersStatsItemDTO[]',
        'initial_items' => '\YandexMarketApi\Model\OrdersStatsItemDTO[]',
        'payments' => '\YandexMarketApi\Model\OrdersStatsPaymentDTO[]',
        'commissions' => '\YandexMarketApi\Model\OrdersStatsCommissionDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'creation_date' => 'date',
        'status_update_date' => 'date-time',
        'status' => null,
        'partner_order_id' => null,
        'payment_type' => null,
        'fake' => null,
        'delivery_region' => null,
        'items' => null,
        'initial_items' => null,
        'payments' => null,
        'commissions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'creation_date' => false,
		'status_update_date' => false,
		'status' => false,
		'partner_order_id' => false,
		'payment_type' => false,
		'fake' => false,
		'delivery_region' => false,
		'items' => false,
		'initial_items' => false,
		'payments' => false,
		'commissions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'creation_date' => 'creationDate',
        'status_update_date' => 'statusUpdateDate',
        'status' => 'status',
        'partner_order_id' => 'partnerOrderId',
        'payment_type' => 'paymentType',
        'fake' => 'fake',
        'delivery_region' => 'deliveryRegion',
        'items' => 'items',
        'initial_items' => 'initialItems',
        'payments' => 'payments',
        'commissions' => 'commissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'creation_date' => 'setCreationDate',
        'status_update_date' => 'setStatusUpdateDate',
        'status' => 'setStatus',
        'partner_order_id' => 'setPartnerOrderId',
        'payment_type' => 'setPaymentType',
        'fake' => 'setFake',
        'delivery_region' => 'setDeliveryRegion',
        'items' => 'setItems',
        'initial_items' => 'setInitialItems',
        'payments' => 'setPayments',
        'commissions' => 'setCommissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'creation_date' => 'getCreationDate',
        'status_update_date' => 'getStatusUpdateDate',
        'status' => 'getStatus',
        'partner_order_id' => 'getPartnerOrderId',
        'payment_type' => 'getPaymentType',
        'fake' => 'getFake',
        'delivery_region' => 'getDeliveryRegion',
        'items' => 'getItems',
        'initial_items' => 'getInitialItems',
        'payments' => 'getPayments',
        'commissions' => 'getCommissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('status_update_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('partner_order_id', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('fake', $data ?? [], null);
        $this->setIfExists('delivery_region', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('initial_items', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('commissions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Идентификатор заказа.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date Дата создания заказа. Формат даты: `ГГГГ-ММ-ДД`.
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets status_update_date
     *
     * @return \DateTime|null
     */
    public function getStatusUpdateDate()
    {
        return $this->container['status_update_date'];
    }

    /**
     * Sets status_update_date
     *
     * @param \DateTime|null $status_update_date Дата и время, когда статус заказа был изменен в последний раз. Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва).
     *
     * @return self
     */
    public function setStatusUpdateDate($status_update_date)
    {
        if (is_null($status_update_date)) {
            throw new \InvalidArgumentException('non-nullable status_update_date cannot be null');
        }
        $this->container['status_update_date'] = $status_update_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \YandexMarketApi\Model\OrderStatsStatusType|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \YandexMarketApi\Model\OrderStatsStatusType|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets partner_order_id
     *
     * @return string|null
     */
    public function getPartnerOrderId()
    {
        return $this->container['partner_order_id'];
    }

    /**
     * Sets partner_order_id
     *
     * @param string|null $partner_order_id Идентификатор заказа в информационной системе магазина.
     *
     * @return self
     */
    public function setPartnerOrderId($partner_order_id)
    {
        if (is_null($partner_order_id)) {
            throw new \InvalidArgumentException('non-nullable partner_order_id cannot be null');
        }
        $this->container['partner_order_id'] = $partner_order_id;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \YandexMarketApi\Model\OrdersStatsOrderPaymentType|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \YandexMarketApi\Model\OrdersStatsOrderPaymentType|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets fake
     *
     * @return bool|null
     */
    public function getFake()
    {
        return $this->container['fake'];
    }

    /**
     * Sets fake
     *
     * @param bool|null $fake Тип заказа:  * false — заказ покупателя.  * true — тестовый заказ Маркета.
     *
     * @return self
     */
    public function setFake($fake)
    {
        if (is_null($fake)) {
            throw new \InvalidArgumentException('non-nullable fake cannot be null');
        }
        $this->container['fake'] = $fake;

        return $this;
    }

    /**
     * Gets delivery_region
     *
     * @return \YandexMarketApi\Model\OrdersStatsDeliveryRegionDTO|null
     */
    public function getDeliveryRegion()
    {
        return $this->container['delivery_region'];
    }

    /**
     * Sets delivery_region
     *
     * @param \YandexMarketApi\Model\OrdersStatsDeliveryRegionDTO|null $delivery_region delivery_region
     *
     * @return self
     */
    public function setDeliveryRegion($delivery_region)
    {
        if (is_null($delivery_region)) {
            throw new \InvalidArgumentException('non-nullable delivery_region cannot be null');
        }
        $this->container['delivery_region'] = $delivery_region;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \YandexMarketApi\Model\OrdersStatsItemDTO[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \YandexMarketApi\Model\OrdersStatsItemDTO[]|null $items Список товаров в заказе после возможных изменений.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets initial_items
     *
     * @return \YandexMarketApi\Model\OrdersStatsItemDTO[]|null
     */
    public function getInitialItems()
    {
        return $this->container['initial_items'];
    }

    /**
     * Sets initial_items
     *
     * @param \YandexMarketApi\Model\OrdersStatsItemDTO[]|null $initial_items Список товаров в заказе до изменений.
     *
     * @return self
     */
    public function setInitialItems($initial_items)
    {
        if (is_null($initial_items)) {
            throw new \InvalidArgumentException('non-nullable initial_items cannot be null');
        }
        $this->container['initial_items'] = $initial_items;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \YandexMarketApi\Model\OrdersStatsPaymentDTO[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \YandexMarketApi\Model\OrdersStatsPaymentDTO[]|null $payments Информация о денежных переводах по заказу.
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets commissions
     *
     * @return \YandexMarketApi\Model\OrdersStatsCommissionDTO[]|null
     */
    public function getCommissions()
    {
        return $this->container['commissions'];
    }

    /**
     * Sets commissions
     *
     * @param \YandexMarketApi\Model\OrdersStatsCommissionDTO[]|null $commissions Информация о комиссиях за заказ.
     *
     * @return self
     */
    public function setCommissions($commissions)
    {
        if (is_null($commissions)) {
            throw new \InvalidArgumentException('non-nullable commissions cannot be null');
        }
        $this->container['commissions'] = $commissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


